=====================================================================
MONGODB
=====================================================================

MongoDB ini disimpan dalam bentuk document (semi structured data)
Di mongodb data disimpan dalam bentuk JSON
Dalam document oriented database tidak ada relasi menggunakan FK, dan relasinya adalan embedded object di dalam document yang sama.

Istilah dalam Document DB

Relational		Document
Database	=>	Database
Table		=>	Collection
Column		=>	Field
Row, Record	=>	Document (JSON, XML, dll)
Join Table	=>	Embedded Document, Reference
SQL		=>	JavaScript

DATABASE
=====================================================================
Biasanya 1 aplikasi akan menggunakan 1 database sehingga tidak tercampur2x
Cara membuat database di mongodb bisa menggunakan use

- use <nama database> : Digunakan untuk memilih database yang ingin digunakan
- show databases : Digunakan untuk menampilkan semua database

Kata kunci use akan beprindah database namun tidak akan terbentuk databasenya, ketika sudah memasukkan collection kedalam database tersebut maka database akan baru benar2x dibuat di MongoDB.

Mothod lain
- db.dropDatabase() : mengahpus database
- db.getName() : menadapatkan nama databse
- db.hostInfo() : mendapatkan info local machine
- db.version() : mendapatkan versi mongodb
- db.stats() : mengambil statistik dari penggunaan db

COLLECTION
=====================================================================
Digunakan untuk menyimpan dokumen
Maksimal ukuran 1 dokumen adalah 16MB, ini itungannya gede sih
Ukuran nested dokumennya adalah 100 level

Method yang bisa digunakan :
- db.getCollectionNames()   : untuk mengambil semua nama collection
- db.createCollection(name) : membuat collection baru
- db.getCollection(name)    : mendapatkan object dari collection
- db.<name>                 : shortcut dari getCollection
- db.getCollectionInfos()   : mendapatkan informasi dari semua collection

Method yang dapat digunakan dalam colelction
- db.<collection>.find()        : mengambil semua document
- db.<collection>.count()       : mengambil jumlah document yang ada
- db.<collection>.drop()        : delete collection
- db.<collection>.totalSize()   : mengambil ukuran collection
- db.<collection>.stats()       : mengambil informasi collection

DATA MODELING
=====================================================================
Ini konsepnya sangat berbeda antara relational dan document database
dalam modeling di mongodb harus dipikirkan bagaimana aplikasi dalam melakukan query, update, dan proses data

Dalam mongodb ini schemanya flexible, jadi bisa nambahin data sebebasnya tanpa harus membuat atau mendifinisikan kolom nya dulu
Dan dalam document yang berbeda bisa memiliki field yang berbeda
namun dalam prakteknya juga sebaiknya menggunakan jenis data yang baku dan struktur yang baku sehingga tidak akan menyulitkan nantinya

dalam mongodb tiap collection wajib memiliki 1 id dengan suffix _id
Dan juga dalam mongodb ini hanya boleh ada 1 PK tanpa adanya composite PK

Ada dua struktur dalam menggunakan MongoDB
- Structure Document Embedded:
    Misal ada filed customers bernama gayuh dan memiliki address di dalamnya, kalo di relational biasanya dibikin table terpisah
    Tapi di MongoDb bisa ditaruh obejctnya di document gayuh, selain itu juga bisa menyimpan array seperti data hobby
- Structure Document References:
    Ini bisa menggunakan style dari relational database, jadi ada field yang dibuat seolah2x merupakan foreign key, namun gabisa join nanti saat select nya
    Jadi harus dilakukan query satu2x

Sebagai acuan bisa menggunakan hal ini, ini jugaberlaku sebaliknya
Jika dokumen ketergantungan dengan data lain maka sebaiknya dibuat embedded
Jika dalam melakukan perubahan sebuah objetnya harus dilakukan cek data lainnya maka sebaiknya dibuat embedded
Jika object lain selalu dibutuhkan kayak relasi one to one maka sebaiknya embedded

DATA TYPE BSON (Binary JSON)
- Double    : Data decimal
- String    : Biasa tulisan
- Object    : untuk embedded document
- Array     : biasa array
- Binarry Data  : Base64 atau BLOB
- ObjectId  : menyimpan id
- Boolean
- Date
- Null
- Regex
- JavaScript
- JavaScript with Scope
- int
- timestamp
- long
- decimal
- minKey
- maxKey

INSERT DOCUMENT
=====================================================================
Data yang diinsert harus dalam bentuk JSON
ObjectId tidak wajib disebutkan, jika tidak disebutkan maka akan dilakukan generate secara random

Untuk insert bisa menggunakan method:
- db.<collection>.insertOne(document)
- db.<collection>.insertMany(array<document>)

Jika ingin memasukkan data long tidak mau integer, harus menggunakan
new NumberLong(strAngka), jika mau int saja bisa menggunakan new NumberInt(strAngka)

Comparison Query Operator
=====================================================================
Ini sama kayak di relational kayak where =, !=, dbs

Ada beberapa operator:
- $eq   : equals
- $gt   : lebih dari
- $gte  : lebih dari sama dengan
- $lt   : kurang dari
- $lte  : kurang dari sama dengan
- $in   : kayak in di relational
- $nin  : not in
- $ne   : not equals

cara penggunaannya adalah
db.collection.find({
    field: {operator: value}
})

Logical Query Operator
=====================================================================
Misal ingin menggunakan operator logika seperti di relational bisa menggunakan beberapa operator sebagai berikut

- $and  : and di relational
- $or   : atau di relational
- $nor  : Ini mengembalikan semua kondisi jika false
- $not  : membalikan kondisi

Cara penggunaan and, or, dan nor
db.collection.find({
    $operator: [
        {
            query
        },
        {
            query
        }
    ]
})

Cara penggunaan not
db.collection.find({
    field: {
        $not: {
            query
        }
    }
})

Element Operator
=====================================================================
Karena berbasis dokumen, kadang ada data yang ada dan engga.
Misal di product 1 ada kategorynya, namun produk lainnya ada kategori

Ada beberapa element operator:
- $exists    : mengecek dokumen apakah memiliki fieldnya
- $type     : Mengecek apakah field tersebut memiliki type itu

contoh
db.products.find({
    field: {
        $exists: false
    }
})

db.products.find({
    field: {
        $type: ["int", "long"]
    }
})

Evaluation Query Operator
=====================================================================
- $expr         : digunakan untuk aggregation, atau mengecek antar field dalam document yang sama
- $jsonSchema   : validasi document sesuai dengan json schema yang telah dibuat sebelumnya, untuk json schema juga harus mengikuti ketentuan dari documentasinya
- $mod          : melakukan opearasi modulo
- $regex        : mengambil dokumen dengan regexnya, ini seperti like query
- $text         : pencarian menggunakan text
- $where        : mengambil document dengan js function

Array Quey Operator
=====================================================================
Ada beberapa operator khusus untuk array
- $all          : mencocokan array yang mengandung elemen2x, ini ga kaya in karena harus ada semua
- $elemMatch    : mengambil document jika element di array memenuhi kondisi, nah kalo in kayak in
- $size         : mengambil dokumen jika ukurannya sesuai

Projection
=====================================================================
Seletelah method find, parameter kedua bisa diisikan projection untuk memilih kolom mana yang ingin diambil saja
namun pada mongodb ini, id akan selalu di select
untuk mengamilnya bisa menggunakan cara namaField: 1 || 0. 1 untuk ditampilkan, 0 tidak ditampilkan

Projection Operator
- $             : untuk limit array data pertama
- $elemMatch    : limit array hanya data pertama yang match
- $meta         : ini nanti di text index
- $slice        : mengontrol jumlah data array yang ingin dikembalikan

Query Modifier
=====================================================================
Melakukan limit, sorting, maupun offset

hal ini bisa dilakukan dengan chaining method sebagai berikut ;
- count()       : mengambil jumlah datanya
- limit(size)   : membatasi jumlah data
- skip(size)    : melakukan offset atau skip n data pertama
- sort(query)   : mengurutkan hasil dari query. 1 => ascending, -1 => descending

Update Document
=====================================================================
Bisa melakukan update document dengan beberapa function berikut:
- updateOne()   : mengubah 1 dokumen
- updateMany()  : mengubah banyak dkumen sekaligus
- replaceOne()  : mengubah total satu dokumen dengan dokumen baru

Syntaxnya adalah
db.collection.methodUpdate(
    {}, //Filter
    {}, //Update
    {}, //Options
)

Field Update Operator
=====================================================================
- $set          : mengubah ilai field
- $unset        : hapus field dokumen
- $inc          : menaikan nilai number di field, bisa dikasih value minus jika ingin mengurangi
- $rename       : mengubah nama field
- $currentDate  : mengubah field menjadi waktu saat ini

Array Update Operator
=====================================================================
- $                 : mengupdate data array pertama
- $[]               : mengupdate semua data array
- $[<identifier>]   : update semua data array sesuai kondisi filter
- <index>           : mengupdate data array sesuai dengan nomor index
- $addToset         : menambahkan value ke array jika belum ada
- $pop              : menghapus element pertama -1 atau terakhir 1
- $pull             : hapus semua element array yang sesuai kondisi
- $push             : menambahkan element ke array
- $pullAll          : menghapus semua element di array
- $each             : digunakan untuk addToSet dan push untuk menambahkan multiple element
- $position         : digunakan di push untuk mengubah posisi data
- $slice            : digunakan di push untuk menentukan jumlah maksimal array
- $sort             : urutlan data array setelah push

Delete Dokumen
=====================================================================
- db.collection.deleteOne(query)    : menghapus 1 dokumen sesuai kondisi query
- db.collection.deleteMany(query)   : menghapus banyak dokumen sesuai query

Bulk Operation
=====================================================================
Ini adalah sebuah solusi jika ingin melakukan insert, update, atau delete data dalam jumlah yang banyak

Method yang dapat digunakan:
- db.collection.insertMany()        : insert dokumen secara banyak sekaligus
- db.collection.updateMany()        : update banyak dokumen sekaligus
- db.collection.deleteMany()        : delete banyak dokumen sekaligus
- db.collection.bulkWrite()         : melakukan operasi write (insert, update, atau delete) banyak secara sekaligus

Isi dari bulkWrite adalah array dimana masing2x isinya adalah:
- insertOne
- insertMany
- updateOne
- updateMany
- deleteOne
- deletemany

Indexes
=====================================================================
Ini adalah cara untuk melakukan query dengan lebih efisien
Jika tidak dilakukan indexing, maka akan dilakukan collection scan
Index yang digunakan pada mongodb aalah BTREE seperti pada relational database pada biasanya

function yang digunakan untuk manipulasi index
- db.collection.createIndex()       : membuat index di collection
- db.collection.getIndexes()        : melihat semua index di collection
- db.collection.dropIndex()         : menghapus index di collection

Secara default sama kek di relational database, id atau primary key adalah index

saat membuat index bisa menggunakan 1 untuk ascending dan -1 untuk descending untuk mengurutkannya

Compound Indexes
=====================================================================
Jika butuh melakukan query lebih dari 1 field, bisa digunakan index terhadap lebih dari 1 field
Hal ini disebut sebagai compound index
Mongodb melakukan pembatasan maksimal field yang dibuat di compound index adalah 32 field
Cara membuatnya juga sama kayak seperti biasa

Sama kayak relational, kombinasi dari index adalah sebagai berikut
misal buat index(a,b,c) maka pencarian yang akan kena index adalah query a, ab, abc

Text Index
=====================================================================
Digunakan untuk pencarian text di tipe data string
Selain string ini juga bisa digunakan array string
Ini akan cepat jika melakukan pencarian menggunakan $regex
Tapi ini tidak secepat search engine, oleh karena itu jika banyak kombinasi text lebih baik gunakan search engine

Saat ingin membuat text index, bukan lagi menggunakan 1 atau -1, tapi menuliskan text
Lalu diberikan weights atau bobotnya, semakin besar bobotnya maka prioritasnya akan semakin besar

untuk melakukan pencarian di text index bisa menggunakan operator $text
text index ini bersifat insensitive

jika misal ingin mencari kedua kata dengan operator or, contohnya "mie lapto" maka akan mencari mie atau laptop
Jika mencari harus keduanya bisa '"mie sedaap"'
Jika ingin mencari kata pertama yang tidak mengandung kata kedua bisa menggunakan "mie -sedaap": tanda - sebagai penanda agar tidak dicari


Meta Operator
=====================================================================
$meta bisa digunakan untuk mendapatkan text score
Hal ini sangat bermanfaat untuk membantu proses debugging


Wildcard index
=====================================================================
Ini bisa digunakan pada field yang bisa berubah2x
Misal ada embedded dokumen dengan custom fields
Dengan menggunakan wildcard ini bisa mempercepat query ke custom field tersebut

caranya adalah dengan menambahkan .$** pada field yang ingin dibuat wildcard
Jangan terlalu banyak membuat wildcard, karena jika fieldnya semakin besar maka insert, update, dan deletenya akan semakin lama

Index Properties
=====================================================================
Menambahkan kemampuan tertentu pada index yang dibuat
TTL : Time To Live, ini adalah waktu untuk waktu hidup dari dokumen, jika waktunya sudah habisa maka datanya akan hilang
TTL dapat digunakan hanya pada field dengan tipe data date
namun cron pada mongodb ini berjalan setiap 60 detik sekali
Jadi waktu expired yang digunakan ini menghitung dari field date + waktu yang ditentukan
Bukan dari kapan data tersebut di insert

Unique Index
=====================================================================
Sama kayak di database relational ini agar datanya tidak boleh duplikat
Jika tidak semua data memiliki field yang unique maka secara default maka akan terjadi error
Jika hanya ingin menerapkan unique pada data yang memiliki field tersebut bisa menambahkan sparse: true

Case Insensitive
=====================================================================
Defaultnya data akan disimpan case sensitive
Jika ingin datanya menjadi insensitive bisa menggunakan index dengan nilai collation strength = 2

Dan untuk melakukan select pada index ini tidak bisa menggunakan cara biasa, harus menambahkan collationnya

Partial
=====================================================================
Ada cara kondisi tertentu untuk menggunakan index jika kondisi tertentu terpenuhi

Security
=====================================================================
Secara default di mongodb tidak ada authentication samsek
Agar aman bisa dilakukan pengaktifkan fitur security
Pertama harus dibuat user adminnya, admin memiliki role userAdminAnyDatabase dan readWriteAnyDatabase
Dan ketika sudah dibuat nanti jalanin mongodb tambahin --auth
Data user base practice nya disimpan dalam database admin

User Management
=====================================================================
Kita bisa membuat user lagi dan memberikan role terhadap user tersebut, best practicenya user disimpan dalam database admin
User juga bersifat unique
Function2x yang dapat digunakan:
- db.cerateUser()       : membuat user
- db.getUsers()         : melihat semua user
- db.dropUser()         : menghapus user
- db.updateuser()       : update user
- db.changeUserPassword() : mengubah user password

Authorization
Ini adalah hal yang dilakukan jika authenticationnya sudah sukses, authorization ini untuk mengecek hak akses atau role

Database roles bawaan mongodb adalah:
- read      : membaca data di semua collection yang bukan sistem collection
- readWrite : membaca dan write data di semua collection yang bukan sistem collection
- dbAdmin   : admin database
- userAdmin : membuat user dan role
- dbOwner   : kombinasi semuanya
- readAnyDatabase   : seperti read tapi untuk semua database
- readWriteAnyDatabase  : seperti readWrite tapi untuk semua db
- userAdminAnyDatabase  : seperti userAdmin, tapi untuk semua database
- dbAdminAnyDatabase    : seperti dbAdmin, tapi untuk semua database
- backup    : untuk melakukan backup
- restore   : untuk restore database
- root      : bisa melakukan semuanya

Role
=====================================================================
Jika ingin membuat role sendiri yang lebih customize, seperti membatasi role pada level collection
Karena pada dasarnya role built in dari mongodb hanya pada level database
untuk melakukan hal ini harus menggunakan fitur previllage

function2x yang bisa digunakan
- db.createRole()
- db.getRoles()
- db.deleteRole()
- db.updateRole()

Backup
=====================================================================
Mongodb tidak memiliki tools bawaan untuk melakukan backup dan restore
Ada tools bernama mongodb tools untuk melakukan backup dan restore
Ada dua aplikasi yang bisa digunakan dalam melakukan backup
- mongodump     : backup dalam format binary, ini akan lebih cepat ketika datanya berisi binary atau ukurannya besar
- mongoexport   : backup dalam format json/csv, cocok jika datanya tidak terlalu besar dan hanya berisi text. Namun cuma bisa per collection

Restore
=====================================================================
Untuk melakukan restore bisa menggunakan aplikasi berdasarkan backupnya
- mongorestore  : untu mongodump
- mongoimport   : untuk mongoexport